import datetime
import io
import logging
import re

import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from sqlalchemy import create_engine, text

from aiogram import Bot, Router, types
from aiogram.filters import Command, CommandStart, Text
from aiogram.types import Message, ReplyKeyboardRemove

import user_schedule
from keyboards import keyboards
from database import db_functions
from lexicon.lexicon import LEXICON


router: Router = Router()


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/start" -
# –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ –±—ã–ª–æ
# –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(LEXICON['/start'])
    user_id = message.from_user.id  # type: ignore
    if not await db_functions.check_user_exists(user_id):
        await db_functions.add_new_user(user_id)
    await message.answer(LEXICON['start_settings_button'],
                         reply_markup=keyboards.start_choice)


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help" -
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ
@router.message(Command(commands='help'))
@router.message(Text(text='üõü–ü–æ–º–æ—â—å'))
async def process_help_command(message: Message):
    await message.answer(LEXICON['/help'])


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/settime" –∏ —Ç–µ–∫—Å—Ç "–î–∞üòä" –∏–ª–∏ "‚è∞–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" -
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(Text(text='–î–∞üòä'))
@router.message(Command(commands='settime'))
@router.message(Text(text='‚è∞–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'))
async def process_setting_command_yes(message: Message):
    await message.answer(LEXICON['reminderset'], reply_markup=keyboards.kb_builder_time.as_markup(
                                            resize_keyboard=True))


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç "–ù–µ—Çüòí" -
# —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç –≤—ã–±–æ—Ä–∞
@router.message(Text(text='–ù–µ—Çüòí'))
async def process_setting_command_no(message: Message):
    await message.answer(LEXICON['no_choice'],
                         reply_markup=ReplyKeyboardRemove(remove_keyboard=True))


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM -
# –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ë–î –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
@router.message(lambda message: re.match(r"\d{1,2}:\d{2}", message.text))
async def process_time_message(message: Message):
    logger = logging.getLogger(__name__)

    time_str = message.text.strip()  # type: ignore

    user_id = message.from_user.id  # type: ignore

    try:

        # Log received user ID and time
        logger.info(f"Updating time notification for user ID: {user_id}, New time: {time_str}")

        await db_functions.update_time_notify(user_id, time_str)

        # Log successful database update
        logger.info(f"Time notification updated for user ID: {user_id}")

        await user_schedule.update_notification(user_id, time_str)

        await message.answer(LEXICON['setdone'], reply_markup=keyboards.defualt_kb)

    except ValueError:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.'
                             '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.')


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/deletenotification" –∏ —Ç–µ–∫—Å—Ç "üö´–£–±—Ä–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" -
# —É–¥–∞–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command(commands='deletenotification'))
@router.message(Text(text='üö´–£–±—Ä–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
async def process_deletion_notification(message: Message):
    user_id = message.from_user.id  # type: ignore
    await user_schedule.delete_notification(user_id)
    await message.answer('–Ø –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏üòû')


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/mood" –∏ —Ç–µ–∫—Å—Ç "üìù–í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å" -
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
@router.message(Command(commands='mood'))
@router.message(Text(text='üìù–í–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å'))
async def process_write_record(message: Message):
    await message.answer(LEXICON['today_mood'], reply_markup=keyboards.kb_builder_mood.as_markup(
                                            resize_keyboard=True))


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1-10) -
# –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –ë–î –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–µ–ø—Ä–µ—Å—Å–∏–∏
@router.message(lambda message: message.text.isdigit() and 1 <= int(message.text) <= 10)
async def process_mood_score(message: Message):
    mood_score = int(message.text)  # type: ignore
    user_id = message.from_user.id  # type: ignore
    current_date = datetime.datetime.now().date()

    try:
        await db_functions.add_mood_score(user_id, mood_score)
        print(await db_functions.process_depression_test(user_id))
        await message.answer("–ó–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                             reply_markup=ReplyKeyboardRemove(remove_keyboard=True))

        first_launch_time = await db_functions.get_first_launch_time(user_id)
        days_since_first_launch = current_date - first_launch_time

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ—Å—Å–∏–∏
        if await db_functions.depression_notification(user_id):
            last_depression_time = datetime.datetime.strptime(
                    await db_functions.get_time_depression(user_id),
                    "%Y-%m-%d"
                ).date()
            days_since_last_depression = current_date - last_depression_time
            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 7 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞, —Ç–æ –¥–∞–ª–µ–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if days_since_first_launch.days < 7:
                return

            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–µ–ø—Ä–µ—Å—Å–∏–∏
            if days_since_last_depression >= datetime.timedelta(days=14):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π
                if await db_functions.process_depression_test(user_id) < 5.0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ—Å—Å–∏–∏
                    await db_functions.set_time_depression(user_id)
                    await message.answer(LEXICON['repeat_depression'])
                else:
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ—Å—Å–∏–∏
                    await db_functions.set_depression_notification(user_id, 0)
            else:
                # –ü—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 14 –¥–Ω–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                pass

        # –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 5 –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
        elif await db_functions.process_depression_test(user_id) < 5.0:
            await db_functions.set_time_depression(user_id)
            await db_functions.set_depression_notification(user_id, 1)
            await message.answer(LEXICON['depression_detected'])

    except Exception as e:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ '
                             '–∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.')
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏: {e}")


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/delete" –∏ —Ç–µ–∫—Å—Ç "‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å" -
# —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Command(commands='delete'))
@router.message(Text(text='‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'))
async def process_delete_last_record(message: Message):
    try:
        await db_functions.delete_last_record(message.from_user.id)  # type: ignore
        await message.answer(LEXICON['entry_deleted'])
    except Exception as e:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ '
                             '–∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏.')
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏: {e}")


# –•—ç–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/chart" –∏ —Ç–µ–∫—Å—Ç "üìà–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è" -
# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
@router.message(Command(commands='chart'))
@router.message(Text(text='üìà–ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'))
async def get_chart(message: Message, bot: Bot):

    engine = create_engine("sqlite:///data.db")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    query = text("SELECT * FROM moods WHERE user_id = :user_id")
    df = pd.read_sql_query(query, engine, params={"user_id": message.chat.id})

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã
    df['date'] = pd.to_datetime(df['date'])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    end_date = df['date'].max()
    start_date = end_date - pd.Timedelta(days=29)
    df_filtered = df[(df['date'] >= start_date) & (df['date'] <= end_date)]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.lineplot(x="date", y="mood_value", data=df_filtered, ax=ax)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    ax.set_xlabel("–î–∞—Ç–∞", fontsize=14)
    ax.set_ylabel("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", fontsize=14)
    ax.set_title("–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", fontsize=16)
    ax.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)

    photo_file = types.BufferedInputFile(buffer.getvalue(), filename='my_chart.png')

    await bot.send_photo(message.chat.id, photo=photo_file, caption="–í–∞—à –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
